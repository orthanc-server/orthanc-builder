name: all-builds

on:
  push:
    branches: 
      - '*'
    tags:
      - '*'

  pull_request:
    branches: [ master ]


jobs:
  pre-build:
    name: pre-build
    runs-on: "ubuntu-latest"
    outputs:
      current_branch_tag: ${{steps.branch-name.outputs.current_branch}}
      is_tag: ${{steps.branch-name.outputs.is_tag}}
      ref_branch: ${{steps.branch-name.outputs.ref_branch}}
      default_branch: ${{steps.branch-name.outputs.default_branch}}
      is_default: ${{steps.branch-name.outputs.is_default}}
    steps:
      - name: Get branch/tag name
        id: branch-name
        uses: tj-actions/branch-names@v5.1
        # output: steps.branch-name.outputs.current_branch contains the branch or the tag


  build-osx-package:
    name: build-osx-package
    runs-on: "ubuntu-latest"
    needs: [pre-build]

    steps:
    
    - uses: actions/checkout@v2

    - name: Echo var
      run: |
        echo ${{ needs.pre-build.outputs.is_tag }} ${{ needs.pre-build.outputs.current_branch_tag }} ${{ needs.pre-build.outputs.ref_branch }} ${{ needs.pre-build.outputs.default_branch }} ${{ needs.pre-build.outputs.is_default }}
        echo ${{ github.ref}}
        pwd

    - name: Build osx package
      run: ./build-osx-package.sh is_tag=${{ needs.pre-build.outputs.is_tag }} version=stable branchTagName=${{ needs.pre-build.outputs.current_branch_tag }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}



  build-windows-installer:
    name: build-windows-installer
    runs-on: "ubuntu-latest"
    needs: [pre-build]

    steps:
    
    - uses: actions/checkout@v2

    - name: Echo var
      run: |
        echo ${{ needs.pre-build.outputs.is_tag }} ${{ needs.pre-build.outputs.current_branch_tag }} ${{ needs.pre-build.outputs.ref_branch }} ${{ needs.pre-build.outputs.default_branch }} ${{ needs.pre-build.outputs.is_default }}
        echo ${{ github.ref}}

    - name: Build installer
      run: ./ciBuildWindowsInstaller.sh ${{ needs.pre-build.outputs.is_tag }} ${{ needs.pre-build.outputs.current_branch_tag }}
      working-directory: ./WindowsInstaller
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      

  build-docker:
    name: build-docker
    runs-on: "ubuntu-latest"
    needs: [pre-build]
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "linux/amd64",
            platform: "linux/amd64",
            cache: "cache-amd64-stable",
            stableUnstable: "stable"
          }
        # TODO: remove that config once it is successfull (it is handled by nightly-unstable-packages.yml)
        - {
            name: "linux/amd64",
            platform: "linux/amd64",
            cache: "cache-amd64-unstable",
            stableUnstable: "unstable"
          }
        
        # ARM 64 builds are deactivated because, with QEMU emulation, we reach the 6h timeouts for a build step
        # in github actions (e.g to run .vcpkg install azure-sdk-cpp and similar) -> to reactivate once we have access
        # to an ARM64 slave
        # - {
        #     name: "linux/arm64",
        #     platform: "linux/arm64",
        #     cache: "cache-arm64" 
        #   }
        # - {
        #     name: "linux/all",
        #     platform: "linux/arm64,linux/amd64",
        #     cache: "cache-all" 
        #   }

    steps:
    
    - name: Maximize build space
      uses: easimon/maximize-build-space@v5
      with:
        # reserve space for docker
        root-reserve-mb: 40000
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'

    - uses: actions/checkout@v2

    - name: Set up QEMU
      if: ${{ matrix.config.platform == 'linux/arm64' }}
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        config: .github/buildkitd.toml

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true

    - name: Build with local-build.sh
      run: ./local-build.sh version=${{ matrix.config.stableUnstable }} platform=${{ matrix.config.platform }} type=ci step=build currentTag=${{ needs.pre-build.outputs.current_branch_tag }}-${{ matrix.config.stableUnstable }}

    - name: Run integration tests
      run: ./run-integration-tests.sh version=${{ matrix.config.stableUnstable }} tagToTest=${{ needs.pre-build.outputs.current_branch_tag }}-${{ matrix.config.stableUnstable }}
      working-directory: ${{github.workspace}}/docker/integration-tests

    - name: Push with branch/tag
      run: ./local-build.sh version=${{ matrix.config.stableUnstable }} platform=${{ matrix.config.platform }} type=ci step=push currentTag=${{ needs.pre-build.outputs.current_branch_tag }}-${{ matrix.config.stableUnstable }} pushTag=${{ needs.pre-build.outputs.current_branch_tag }}-${{ matrix.config.stableUnstable }}

    - name: Push with latest tag
      if: needs.pre-build.outputs.is_tag == 'true'
      run: ./local-build.sh version=${{ matrix.config.stableUnstable }} platform=${{ matrix.config.platform }} type=ci step=push currentTag=${{ needs.pre-build.outputs.current_branch_tag }}-${{ matrix.config.stableUnstable }} pushTag=latest

    - name: Update DockerHub repo description
      uses: peter-evans/dockerhub-description@v2
      if: needs.pre-build.outputs.is_tag == 'true'
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: osimis/orthanc

