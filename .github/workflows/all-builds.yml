name: all-builds

on:
  push:
    branches: 
      - '*'
    tags:
      - '*'

  pull_request:
    branches: [ master ]

jobs:
  pre-build:
    name: pre-build
    runs-on: "ubuntu-latest"
    outputs:
      current_branch_tag: ${{steps.branch-name.outputs.current_branch}}
      is_tag: ${{steps.branch-name.outputs.is_tag}}
      ref_branch: ${{steps.branch-name.outputs.ref_branch}}
      default_branch: ${{steps.branch-name.outputs.default_branch}}
      is_default: ${{steps.branch-name.outputs.is_default}}
    steps:
      - name: Get branch/tag name
        id: branch-name
        uses: tj-actions/branch-names@v5.1
        # output: steps.branch-name.outputs.current_branch contains the branch or the tag

  # build-windows-installer:
  #   name: build-windows-installer
  #   runs-on: "ubuntu-latest"
  #   needs: [pre-build]

  #   steps:
    
  #   - uses: actions/checkout@v2

  #   - name: Echo var
  #     run: |
  #       echo ${{ needs.pre-build.outputs.is_tag }} ${{ needs.pre-build.outputs.current_branch_tag }} ${{ needs.pre-build.outputs.ref_branch }} ${{ needs.pre-build.outputs.default_branch }} ${{ needs.pre-build.outputs.is_default }}
  #       echo ${{ github.ref}}

  #   - name: Build installer
  #     run: ./ciBuildWindowsInstaller.sh ${{ needs.pre-build.outputs.is_tag }} ${{ needs.pre-build.outputs.current_branch_tag }}
  #     working-directory: ./WindowsInstaller
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      

  build-docker:
    name: build-docker
    runs-on: "ubuntu-latest"
    needs: [pre-build]
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "linux/amd64",
            platform: "linux/amd64",
            cache: "osimis-orthanc-amd64" 
          }
        - {
            name: "linux/arm64",
            platform: "linux/arm64",
            cache: "osimis-orthanc-arm64" 
          }

    steps:
    
    - uses: actions/checkout@v2

    - name: Set up QEMU
      if: ${{ matrix.config.platform == 'linux/arm64' }}
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        config: .github/buildkitd.toml

    - name: Build the osimis/orthanc Docker image (no push)
      uses: docker/build-push-action@v2
      with:
        context: docker/orthanc/
        platforms: ${{ matrix.config.platform }}
        push: false
        tags: osimis/orthanc:current
        cache-from: type=gha,scope=${{ matrix.config.cache }}
        cache-to: type=gha,scope=${{ matrix.config.cache }}

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push with branch/tag
      uses: docker/build-push-action@v2
      with:
        context: docker/orthanc/
        platforms: ${{ matrix.config.platform }}
        push: true
        tags: osimis/orthanc:${{ needs.pre-build.outputs.current_branch_tag }}  # push with branch name or tag
        cache-from: type=gha,scope=${{ matrix.config.cache }}
        cache-to: type=gha,scope=${{ matrix.config.cache }}

    - name: Push with latest tag
      uses: docker/build-push-action@v2
      if: needs.pre-build.outputs.is_tag == 'true'
      with:
        context: docker/orthanc/
        platforms: ${{ matrix.config.platform }}
        push: true
        tags: osimis/orthanc:latest
        cache-from: type=gha,scope=${{ matrix.config.cache }}
        cache-to: type=gha,scope=${{ matrix.config.cache }}

 

